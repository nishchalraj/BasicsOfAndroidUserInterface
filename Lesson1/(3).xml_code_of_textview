Here is a sample code for using a text view i.e. using a text part in your mobile application :   

<TextView
        android:layout_width="match_parent" 
        android:layout_height="wrap_content"
        android:text="I am learning xml"
        android:textSize="30sp" />
    
So, lets understand the meaning of the above code :
By using "android:layout_width" we are giving the width to the TextView. Here we have given it match_parent.
By using match_parent, we are giving the space occupied by its parent. For example, if the parent of TextView is having width 
equals 10dp (dp means density pixel - a unit of measurement) then the TextView will match it's parent's width i.e. 10dp. In this case
both parent and child will have the same width. In our example, since there is no parent so by default mobile's screen width will 
be considered as the width of the parent and hence the width of the TextView. 

Now if we use "wrap_content" then the width of the TextView will depend upon the text present in it i.e. for smaller text width will be
small and for larger text width will be large. By simple meaning, wrap_content will wrap around the content (text in the TextView).

By using "android:text", we can put some text in our TextView (here we are putting "I am learning xml").

By using "android:textSize", we are giving the size of text present in the TextView (sp is another unit which stands for Scale Independent Pixel).

You can find the view or the output of this code in the lesson folder as xml-textview.png

Try to update the above code of TextView by using some other properties.

For example :

<TextView
            android:layout_width="wrap_content"
            android:layout_height="48dp"
            android:layout_marginLeft="16dp"
            android:gravity="center"
            android:text="I am learning xml "
            android:textColor="#000000"
            android:textSize="20sp" />
            
Try to identify the use of some new properties that we have not used in the first code.
